
char* ft_strcat(char *dest, char *src)
{
	char* p_dest;
	char* p_src;

	p_dest = dest;
	while (*p_dest != '\0')
	{
		p_dest++;
	}
	p_src = src;
	while (*p_src != '\0')
	{
		*p_dest++ = *p_src++;
	}
	*p_dest = '\0';
	return dest;
}

void print_tree(t_node* root)
{
	char indent[1024] = "";
	if (root->right != NULL)
	{
		print_tree_node(root->right, true, "");
	}
	printf("[%s]\n", root->data);
	if (root->left != NULL)
	{
		print_tree_node(root->left, false, "");
	}
}

void print_tree_node(t_node* node, bool is_right, char *indent)
{
	char r_indent[512];
	char l_indent[512];
	ft_strlcpy(r_indent, indent , 512);
	ft_strlcpy(l_indent, indent , 512);
	if (node->right != NULL)
	{
		print_tree_node(node->right, true, ft_strcat(r_indent, is_right ? "        " : " |      "));
	}
	printf("%s", indent);
	if (is_right)
	{
		printf(" /");
	}
	else
	{
		printf(" \\");
	}
	printf("----- ");
	printf("[%s]\n", node->data);
	if (node->left != NULL)
	{
		print_tree_node(node->left, false, ft_strcat(l_indent, is_right ? "        " : " |      "));
	}
}

static void print_envs(char **envs)
{
	char **p_envs;

	p_envs = envs;
	while (*p_envs != NULL)
	{
		printf("%s\n", *p_envs);
		++p_envs;
	}
}

static void print_command(t_command *command)
{
	int i;


	i = 0;
	while (i < command->num_token)
	{
		printf("%s\n", command->tokens[i]);
		++i;
	}
}



gcc  -Wall -Werror -Wextra -I ./as_tree ./allow_function ./builtin ./command_initializer ./env_variable ./execute ./exit_code ./libft ./sig ./stdio_manager  -I ~/.brew/opt/readline/include -c main.c -o objects/main.o

gcc  -Wall -Werror -Wextra -I ./includes -I ~/.brew/opt/readline/include -c ./srcs/main.c -o objects/main.o